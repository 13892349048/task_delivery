{
  "info": {
    "name": "TaskManage API Tests",
    "description": "企业级API测试集合 - 完整的功能和集成测试",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全局前置脚本",
          "pm.globals.set('base_url', 'http://localhost:8081');",
          "pm.globals.set('api_version', 'v1');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全局测试脚本",
          "pm.test('Response time is less than 200ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(200);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8081"
    },
    {
      "key": "api_version",
      "value": "v1"
    }
  ],
  "item": [
    {
      "name": "认证模块测试",
      "item": [
        {
          "name": "用户注册",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"test_user_{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"TestPass123!\",\n  \"real_name\": \"测试用户\",\n  \"phone\": \"13800138000\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "用户登录",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains JWT token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('access_token');",
                  "    pm.expect(responseJson.data).to.have.property('refresh_token');",
                  "    ",
                  "    // 保存token供后续请求使用",
                  "    pm.globals.set('jwt_token', responseJson.data.access_token);",
                  "    pm.globals.set('refresh_token', responseJson.data.refresh_token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "员工管理模块测试",
      "item": [
        {
          "name": "获取员工列表",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains employee list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "创建员工",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Employee created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    ",
                  "    // 保存员工ID供后续测试使用",
                  "    pm.globals.set('test_employee_id', responseJson.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": 1,\n  \"employee_no\": \"EMP{{$randomInt}}\",\n  \"department\": \"开发部\",\n  \"position\": \"软件工程师\",\n  \"level\": \"中级\",\n  \"status\": \"active\",\n  \"max_tasks\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"]
            }
          }
        },
        {
          "name": "更新员工状态",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Status updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('成功');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"busy\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/{{test_employee_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "{{test_employee_id}}", "status"]
            }
          }
        },
        {
          "name": "按状态查询员工",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filtered employees returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/status?status=active",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "status"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            }
          }
        },
        {
          "name": "获取工作负载统计",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workload stats returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/workload/stats?department=开发部",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "workload", "stats"],
              "query": [
                {
                  "key": "department",
                  "value": "开发部"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "技能管理模块测试",
      "item": [
        {
          "name": "创建技能",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Skill created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    ",
                  "    // 保存技能ID供后续测试使用",
                  "    pm.globals.set('test_skill_id', responseJson.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Go语言开发\",\n  \"category\": \"编程语言\",\n  \"description\": \"Go语言后端开发技能\",\n  \"tags\": [\"golang\", \"backend\", \"microservice\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/skills",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "skills"]
            }
          }
        },
        {
          "name": "获取技能列表",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Skills list returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/skills",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "skills"]
            }
          }
        },
        {
          "name": "分配技能给员工",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Skill assigned successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"employee_id\": {{test_employee_id}},\n  \"skill_id\": {{test_skill_id}},\n  \"level\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/skills/assign",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "skills", "assign"]
            }
          }
        }
      ]
    },
    {
      "name": "任务管理模块测试",
      "item": [
        {
          "name": "创建任务",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Task created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    ",
                  "    // 保存任务ID供后续测试使用",
                  "    pm.globals.set('test_task_id', responseJson.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"测试任务{{$randomInt}}\",\n  \"description\": \"这是一个用于测试的任务\",\n  \"priority\": \"high\",\n  \"type\": \"development\",\n  \"category\": \"后端开发\",\n  \"estimated_hours\": 8,\n  \"due_date\": \"2024-12-31T23:59:59Z\",\n  \"required_skills\": [\"golang\", \"database\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/tasks",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "tasks"]
            }
          }
        },
        {
          "name": "获取任务列表",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains task list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('items');",
                  "    pm.expect(responseJson.data.items).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/tasks?page=1&page_size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "tasks"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "获取任务详情",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task details returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/tasks/{{test_task_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "tasks", "{{test_task_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "任务分配模块测试",
      "item": [
        {
          "name": "获取分配策略列表",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Strategies returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.strategies).to.be.an('array');",
                  "    pm.expect(responseJson.data.strategies.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/assignments/strategies",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "assignments", "strategies"]
            }
          }
        },
        {
          "name": "获取任务分配建议",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Assignment suggestions returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('suggestions');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": {{test_task_id}},\n  \"strategy\": \"comprehensive\",\n  \"limit\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/assignments/suggestions",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "assignments", "suggestions"]
            }
          }
        },
        {
          "name": "自动分配任务",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task auto-assigned successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('assignment');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"strategy\": \"comprehensive\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/tasks/{{test_task_id}}/auto-assign",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "tasks", "{{test_task_id}}", "auto-assign"]
            }
          }
        },
        {
          "name": "手动分配任务",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task manually assigned successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('history');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": {{test_task_id}},\n  \"employee_id\": {{test_employee_id}},\n  \"reason\": \"手动分配测试\",\n  \"priority\": \"normal\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/assignments/manual",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "assignments", "manual"]
            }
          }
        },
        {
          "name": "获取分配历史",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Assignment history returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('history');",
                  "    pm.expect(responseJson.data.history).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/assignments/history/{{test_task_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "assignments", "history", "{{test_task_id}}"]
            }
          }
        },
        {
          "name": "检查分配冲突",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Conflict check completed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('conflicts');",
                  "    pm.expect(responseJson.data.conflicts).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": {{test_task_id}},\n  \"employee_id\": {{test_employee_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/assignments/conflicts/{{test_task_id}}?employee_id={{test_employee_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "assignments", "conflicts", "{{test_task_id}}"],
              "query": [
                {
                  "key": "employee_id",
                  "value": "{{test_employee_id}}"
                }
              ]
            }
          }
        },
        {
          "name": "获取分配统计",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Assignment stats returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('stats');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/assignments/stats?days=30",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "assignments", "stats"],
              "query": [
                {
                  "key": "days",
                  "value": "30"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "任务状态管理测试",
      "item": [
        {
          "name": "开始任务",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task started successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('已开始');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/tasks/{{test_task_id}}/start",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "tasks", "{{test_task_id}}", "start"]
            }
          }
        },
        {
          "name": "完成任务",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task completed successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('已完成');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"comment\": \"任务已完成，所有功能测试通过\",\n  \"files\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/tasks/{{test_task_id}}/complete",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "tasks", "{{test_task_id}}", "complete"]
            }
          }
        }
      ]
    },
    {
      "name": "通知系统测试",
      "item": [
        {
          "name": "获取通知列表",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Notifications list returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('notifications');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "    pm.expect(responseJson.data.notifications).to.be.an('array');",
                  "});",
                  "",
                  "// 保存第一个通知ID用于后续测试",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.data.notifications.length > 0) {",
                  "    pm.globals.set('test_notification_id', responseJson.data.notifications[0].id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications"]
            }
          }
        },
        {
          "name": "获取未读通知",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Unread notifications returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('notifications');",
                  "    // 验证返回的都是未读通知",
                  "    responseJson.data.notifications.forEach(notification => {",
                  "        pm.expect(notification.status).to.equal('unread');",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications?unread_only=true",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications"],
              "query": [
                {
                  "key": "unread_only",
                  "value": "true"
                }
              ]
            }
          }
        },
        {
          "name": "获取未读通知数量",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Unread count returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('count');",
                  "    pm.expect(responseJson.data.count).to.be.a('number');",
                  "    pm.expect(responseJson.data.count).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/unread-count",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "unread-count"]
            }
          }
        },
        {
          "name": "标记通知为已读",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Notification marked as read', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('已读');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/{{test_notification_id}}/read",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "{{test_notification_id}}", "read"]
            }
          }
        },
        {
          "name": "批量标记所有通知为已读",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All notifications marked as read', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('批量标记完成');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/mark-all-read",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "mark-all-read"]
            }
          }
        },
        {
          "name": "接受任务通知",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task accepted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('已接受');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"notification_id\": {{test_notification_id}},\n  \"task_id\": {{test_task_id}},\n  \"reason\": \"接受任务，准备开始工作\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/accept-task",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "accept-task"]
            }
          }
        },
        {
          "name": "拒绝任务通知",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task rejected successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('已拒绝');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"notification_id\": {{test_notification_id}},\n  \"task_id\": {{test_task_id}},\n  \"reason\": \"当前工作负载过重，无法承接新任务\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/reject-task",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "reject-task"]
            }
          }
        },
        {
          "name": "拒绝任务通知 - 缺少理由（错误测试）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing reason', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('理由');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"notification_id\": {{test_notification_id}},\n  \"task_id\": {{test_task_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/reject-task",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "reject-task"]
            }
          }
        },
        {
          "name": "发送通知（TODO）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('TODO response returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('TODO');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recipient_id\": 1,\n  \"title\": \"测试通知\",\n  \"content\": \"这是一个测试通知\",\n  \"type\": \"info\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/send",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "send"]
            }
          }
        },
        {
          "name": "广播通知（TODO）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('TODO response returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.message).to.include('TODO');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"系统维护通知\",\n  \"content\": \"系统将于今晚进行维护，请及时保存工作\",\n  \"type\": \"warning\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/notifications/broadcast",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "notifications", "broadcast"]
            }
          }
        }
      ]
    },
    {
      "name": "错误处理测试",
      "item": [
        {
          "name": "无效认证Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid_token",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"]
            }
          }
        },
        {
          "name": "不存在的资源",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Not found error returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/99999",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "99999"]
            }
          }
        },
        {
          "name": "无效请求参数",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('参数');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid_value\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"]
            }
          }
        }
      ]
    },
    {
      "name": "Workflow Management",
      "item": [
        {
          "name": "Start Task Assignment Approval",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workflow instance created', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('workflow_id');",
                  "    pm.expect(responseJson.data.workflow_id).to.eql('task_assignment_approval');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "    ",
                  "    // Save instance ID for later tests",
                  "    pm.globals.set('workflow_instance_id', responseJson.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": 1,\n  \"assignee_id\": 2,\n  \"assignment_type\": \"manual\",\n  \"priority\": \"high\",\n  \"reason\": \"需要审批的任务分配\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/task-assignment/start",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "task-assignment",
                "start"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Get Pending Approvals",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pending approvals returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/approvals/pending",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "approvals",
                "pending"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Get Approval Count",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Approval count returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "    pm.expect(responseJson.data.total).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/approvals/count",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "approvals",
                "count"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Process Approval - Approve",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Approval processed successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.have.property('action');",
                  "    pm.expect(responseJson.data.action).to.eql('approve');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instance_id\": \"{{workflow_instance_id}}\",\n  \"node_id\": \"manager_approval\",\n  \"action\": \"approve\",\n  \"comment\": \"同意分配\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/approvals/process",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "approvals",
                "process"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Process Approval - Reject",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Approval processed successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.have.property('action');",
                  "    pm.expect(responseJson.data.action).to.eql('reject');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"instance_id\": \"{{workflow_instance_id}}\",\n  \"node_id\": \"manager_approval\",\n  \"action\": \"reject\",\n  \"comment\": \"不同意分配，需要重新考虑\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/approvals/process",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "approvals",
                "process"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Get Workflow Instance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workflow instance details returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('workflow_id');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "    pm.expect(responseJson.data).to.have.property('variables');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/instances/{{workflow_instance_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "instances",
                "{{workflow_instance_id}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Get Workflow History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workflow history returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/instances/{{workflow_instance_id}}/history",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "instances",
                "{{workflow_instance_id}}",
                "history"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Cancel Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workflow cancelled successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.eql(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"测试取消流程\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/instances/{{workflow_instance_id}}/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "instances",
                "{{workflow_instance_id}}",
                "cancel"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "Start Workflow - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.code).to.not.eql(0);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": 1,\n  \"assignee_id\": 2,\n  \"assignment_type\": \"manual\",\n  \"priority\": \"high\",\n  \"reason\": \"未授权测试\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/{{api_version}}/workflows/task-assignment/start",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "{{api_version}}",
                "workflows",
                "task-assignment",
                "start"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid_token",
                  "type": "string"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
